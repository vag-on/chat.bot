from aiogram import types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters import Text
from database.crud import DatabaseManager
from utils.menu import create_main_menu, create_models_menu
from config import config


def setup_commands(dp: Dispatcher):
    @dp.message_handler(commands=['start', 'help'])
    async def cmd_start(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /help"""
        with DatabaseManager() as db:
            db.create_user(message.from_user.id, message.from_user.username)

        await message.answer(
            "ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Chat Bot!</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫–æ–≤—É—é –º–æ–¥–µ–ª—å –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=create_main_menu(),
            parse_mode='HTML'
        )

    @dp.message_handler(Text(equals=config.MAIN_MENU_BUTTONS))
    async def handle_main_menu(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        if message.text == "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç":
            return await handle_clear_context(message)

        with DatabaseManager() as db:
            models = db.get_models_by_group(message.text)

        if not models:
            return await message.answer("‚ö†Ô∏è –ú–æ–¥–µ–ª–∏ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        await message.answer(
            f"üîß –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ –≥—Ä—É–ø–ø—ã <b>{message.text}</b>:",
            reply_markup=create_models_menu(models),
            parse_mode='HTML'
        )

    async def handle_clear_context(message: types.Message):
        """–û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞"""
        with DatabaseManager() as db:
            if db.clear_context(message.from_user.id):
                await message.answer("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!")
            else:
                await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")

        await message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=create_main_menu()
        )

    @dp.message_handler(Text(equals="–ù–∞–∑–∞–¥"))
    async def cmd_back(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'"""
        await cmd_start(message)

    @dp.message_handler(lambda message: message.text in get_all_models())
    async def handle_model_selection(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        model_name = message.text
        with DatabaseManager() as db:
            success = db.update_user_model(
                user_id=message.from_user.id,
                model=model_name
            )

        if success:
            response = (
                f"‚úÖ –ú–æ–¥–µ–ª—å <b>{model_name}</b> —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–∞!\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ "
                "—Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª."
            )
        else:
            response = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."

        await message.answer(
            response,
            reply_markup=create_main_menu(),
            parse_mode='HTML'
        )


def get_all_models() -> list:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    with DatabaseManager() as db:
        groups = db.get_model_groups()
        return [
            model['name']
            for group in groups
            for model in db.get_models_by_group(group['name'])
        ]
