import logging
from aiogram import types
from aiogram.dispatcher import Dispatcher
from aiogram.types import InputFile, ContentType
from pathlib import Path
from config import config
from database.crud import DatabaseManager
from utils.file_processing import file_processor
from utils.api import api_client
from utils.menu import create_main_menu

logger = logging.getLogger(__name__)


def setup_files(dp: Dispatcher):
    @dp.message_handler(content_types=ContentType.DOCUMENT)
    async def handle_document(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Ñ–∞–π–ª–æ–≤"""
        user = message.from_user
        doc = message.document

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            if doc.file_size > config.MAX_FILE_SIZE:
                return await message.answer(
                    f"‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º {config.MAX_FILE_SIZE // 1024 // 1024} –ú–ë)"
                )

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            file_info = await file_processor.save_file(
                file=await doc.get_file(),
                user_id=user.id,
                original_name=doc.file_name
            )

            if not file_info:
                return await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞")

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
            with DatabaseManager() as db:
                user_model = db.get_user(user.id).model

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
            await message.answer("üîÑ –§–∞–π–ª –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
            result = await file_processor.process_file(
                file_path=Path(file_info['path']),
                user_id=user.id,
                model=user_model
            )

            if not result:
                return await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if result['type'] == 'file':
                await message.answer_document(
                    document=result['telegram_file'],
                    caption="‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞"
                )
            elif result['type'] == 'text':
                await message.answer(
                    f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n\n{result['content']}",
                    reply_markup=create_main_menu()
                )

        except Exception as e:
            logger.error(f"File handling error: {str(e)}", exc_info=True)
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞")

    @dp.message_handler(Text(equals="–û—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª—ã"))
    async def handle_clear_files(message: types.Message):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with DatabaseManager() as db:
                db.cursor.execute("DELETE FROM files WHERE user_id = ?", (message.from_user.id,))
                count = db.cursor.rowcount

            await message.answer(
                f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {count} —Ñ–∞–π–ª–æ–≤ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏",
                reply_markup=create_main_menu()
            )
        except Exception as e:
            logger.error(f"Clear files error: {str(e)}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤")

    @dp.message_handler(commands=['my_files'])
    async def cmd_my_files(message: types.Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            with DatabaseManager() as db:
                files = db.cursor.execute('''
                    SELECT file_uid, original_name, processed, created_at 
                    FROM files 
                    WHERE user_id = ?
                    ORDER BY created_at DESC 
                    LIMIT 10
                ''', (message.from_user.id,)).fetchall()

            if not files:
                return await message.answer("üìÅ –í—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–ª–∏ —Ñ–∞–π–ª–æ–≤")

            response = ["üìÇ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ñ–∞–π–ª–æ–≤:"]
            for file in files:
                status = "‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω" if file[2] else "üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ"
                response.append(
                    f"‚ñ´Ô∏è {file[1]} ({status})\n"
                    f"<code>ID: {file[0]}</code>\n"
                    f"–î–∞—Ç–∞: {file[3][:16]}"
                )

            await message.answer(
                "\n\n".join(response),
                parse_mode='HTML',
                reply_markup=create_main_menu()
            )
        except Exception as e:
            logger.error(f"Files history error: {str(e)}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ñ–∞–π–ª–æ–≤")
